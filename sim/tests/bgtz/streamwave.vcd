$date
	Sun May 17 10:03:23 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module userlogic_test $end
$var wire 32 ! data_out [31:0] $end
$var wire 15 " input_buffer_addr [14:0] $end
$var wire 15 # output_buffer_addr [14:0] $end
$var wire 32 $ ul_instr [31:0] $end
$var wire 32 % ul_instr_addr [31:0] $end
$var wire 32 & ul_read_addr [31:0] $end
$var wire 32 ' ul_read_data [31:0] $end
$var wire 32 ( ul_status [31:0] $end
$var wire 32 ) ul_test [31:0] $end
$var wire 32 * ul_write_addr [31:0] $end
$var wire 32 + ul_write_data [31:0] $end
$var wire 16 , ul_write_data_hi [15:0] $end
$var wire 16 - ul_write_data_lo [15:0] $end
$var wire 2 . ul_write_en_hi [1:0] $end
$var wire 2 / ul_write_en_lo [1:0] $end
$var reg 1 0 clk $end
$var reg 32 1 cycle_count [32:1] $end
$var integer 32 2 dump_vars [31:0] $end
$var reg 8192 3 dump_vars_filename [8192:1] $end
$var integer 32 4 i [31:0] $end
$var reg 10 5 image_n_columns [9:0] $end
$var reg 10 6 image_n_rows [9:0] $end
$var reg 8192 7 input_buffer_filename [8192:1] $end
$var reg 8192 8 instr_mem_filename [8192:1] $end
$var reg 32 9 num_cycles [32:1] $end
$var reg 33 : out_end_addr [32:0] $end
$var reg 33 ; out_start_addr [32:0] $end
$var integer 32 < outfile [31:0] $end
$var reg 8192 = output_buffer_filename [8192:1] $end
$var reg 15 > read_addr [14:0] $end
$var integer 32 ? read_input_buffer [31:0] $end
$var integer 32 @ read_instr_mem [31:0] $end
$var integer 32 A result [31:0] $end
$var reg 1 B rst_n $end
$var reg 8192 C test_result_filename [8192:1] $end
$var reg 32 D ul_command [31:0] $end
$var integer 32 E write_output_buffer [31:0] $end
$var integer 32 F write_test_result [31:0] $end
$scope module instr_mem $end
$var wire 14 G addr [13:0] $end
$var wire 1 H clk $end
$var wire 32 I din [31:0] $end
$var wire 1 J we $end
$var reg 32 K dout [31:0] $end
$upscope $end
$scope module input_buffer $end
$var wire 15 L addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 M din [31:0] $end
$var wire 1 N we $end
$var reg 32 O dout [31:0] $end
$upscope $end
$scope module output_buffer $end
$var wire 15 P addr [14:0] $end
$var wire 1 H clk $end
$var wire 32 Q din [31:0] $end
$var wire 4 R we [3:0] $end
$var reg 32 S dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$scope module ul $end
$var wire 1 T addr_cmd $end
$var wire 1 U addr_iobuf $end
$var wire 1 V addr_local $end
$var wire 1 W addr_status $end
$var wire 1 X addr_test $end
$var wire 1 H clk $end
$var wire 32 Y command [31:0] $end
$var wire 32 Z instr [31:0] $end
$var wire 32 [ instr_addr [31:0] $end
$var wire 32 \ mips_addr [31:0] $end
$var wire 32 ] mips_local_read_data [31:0] $end
$var wire 32 ^ mips_pc [31:0] $end
$var wire 32 _ mips_read_data [31:0] $end
$var wire 1 ` mips_read_en $end
$var wire 4 a mips_write_en [3:0] $end
$var wire 32 b read_addr_hi [31:0] $end
$var wire 32 c read_addr_lo [31:0] $end
$var wire 32 d read_data [31:0] $end
$var wire 16 e read_data_hi [15:0] $end
$var wire 16 f read_data_lo [15:0] $end
$var wire 1 g rst_n $end
$var wire 32 h status [31:0] $end
$var wire 32 i test [31:0] $end
$var wire 32 j write_addr_hi [31:0] $end
$var wire 32 k write_addr_lo [31:0] $end
$var wire 32 l write_data [31:0] $end
$var wire 16 m write_data_hi [15:0] $end
$var wire 16 n write_data_lo [15:0] $end
$var wire 2 o write_en_hi [1:0] $end
$var wire 2 p write_en_lo [1:0] $end
$var reg 32 q cmd_d [31:0] $end
$var reg 1 r read_cmd_d $end
$var reg 1 s read_iobuf_d $end
$var reg 32 t status_reg [31:0] $end
$var reg 32 u test_reg [31:0] $end
$scope module cpu $end
$var wire 32 v alu_op_x_ex [31:0] $end
$var wire 32 w alu_op_x_id [31:0] $end
$var wire 32 x alu_op_y_ex [31:0] $end
$var wire 32 y alu_op_y_id [31:0] $end
$var wire 1 z alu_op_y_zero_ex $end
$var wire 4 { alu_opcode_ex [3:0] $end
$var wire 4 | alu_opcode_id [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 32 ~ alu_result_ex [31:0] $end
$var wire 32 !" alu_result_mem [31:0] $end
$var wire 32 "" alu_sc_result_ex [31:0] $end
$var wire 1 #" atomic_en $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 %" en_if $end
$var wire 32 &" instr [31:0] $end
$var wire 32 '" instr_id [31:0] $end
$var wire 30 (" instr_number_id [29:0] $end
$var wire 32 )" instr_sav [31:0] $end
$var wire 32 *" jr_pc_id [31:0] $end
$var wire 1 +" jr_target_id $end
$var wire 1 ," jump_branch_id $end
$var wire 1 -" jump_target_id $end
$var wire 32 ." mem_addr [31:0] $end
$var wire 1 /" mem_atomic_ex $end
$var wire 1 0" mem_atomic_id $end
$var wire 1 1" mem_byte_ex $end
$var wire 1 2" mem_byte_id $end
$var wire 1 3" mem_byte_mem $end
$var wire 32 4" mem_out [31:0] $end
$var wire 32 5" mem_read_data [31:0] $end
$var wire 32 6" mem_read_data_byte_extend [31:0] $end
$var wire 8 7" mem_read_data_byte_select [7:0] $end
$var wire 1 ` mem_read_en $end
$var wire 1 8" mem_read_ex $end
$var wire 1 9" mem_read_id $end
$var wire 1 :" mem_read_mem $end
$var wire 1 ;" mem_sc_ex $end
$var wire 1 <" mem_sc_id $end
$var wire 1 =" mem_sc_mask_id $end
$var wire 1 >" mem_signextend_ex $end
$var wire 1 ?" mem_signextend_id $end
$var wire 1 @" mem_signextend_mem $end
$var wire 1 A" mem_we_ex $end
$var wire 1 B" mem_we_id $end
$var wire 32 C" mem_write_data [31:0] $end
$var wire 32 D" mem_write_data_ex [31:0] $end
$var wire 32 E" mem_write_data_id [31:0] $end
$var wire 4 F" mem_write_en [3:0] $end
$var wire 1 G" movn_ex $end
$var wire 1 H" movn_id $end
$var wire 1 I" movz_ex $end
$var wire 1 J" movz_id $end
$var wire 32 K" pc [31:0] $end
$var wire 32 L" pc_id [31:0] $end
$var wire 32 M" pc_if [31:0] $end
$var wire 1 N" reg_we_cond_ex $end
$var wire 1 O" reg_we_ex $end
$var wire 1 P" reg_we_id $end
$var wire 1 Q" reg_we_mem $end
$var wire 1 R" reg_we_wb $end
$var wire 5 S" reg_write_addr_ex [4:0] $end
$var wire 5 T" reg_write_addr_id [4:0] $end
$var wire 5 U" reg_write_addr_mem [4:0] $end
$var wire 5 V" reg_write_addr_wb [4:0] $end
$var wire 32 W" reg_write_data_mem [31:0] $end
$var wire 32 X" reg_write_data_wb [31:0] $end
$var wire 5 Y" rs_addr_id [4:0] $end
$var wire 32 Z" rs_data_id [31:0] $end
$var wire 1 [" rst $end
$var wire 1 \" rst_id $end
$var wire 5 ]" rt_addr_id [4:0] $end
$var wire 32 ^" rt_data_id [31:0] $end
$var wire 32 _" sc_result [31:0] $end
$var wire 1 `" stall $end
$var wire 1 a" stall_r $end
$scope module if_stage $end
$var wire 1 H clk $end
$var wire 1 %" en $end
$var wire 26 b" instr_id [25:0] $end
$var wire 32 c" j_addr [31:0] $end
$var wire 32 d" jr_pc_id [31:0] $end
$var wire 1 +" jr_target_id $end
$var wire 1 -" jump_target $end
$var wire 32 e" pc [31:0] $end
$var wire 32 f" pc_id [31:0] $end
$var wire 32 g" pc_id_p4 [31:0] $end
$var wire 32 h" pc_next [31:0] $end
$var wire 1 [" rst $end
$scope module pc_reg $end
$var wire 1 H clk $end
$var wire 32 i" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 [" r $end
$var reg 32 j" q [31:0] $end
$upscope $end
$upscope $end
$scope module pc_if2id $end
$var wire 1 H clk $end
$var wire 32 k" d [31:0] $end
$var wire 1 %" en $end
$var wire 1 [" r $end
$var reg 32 l" q [31:0] $end
$upscope $end
$scope module instr_sav_dff $end
$var wire 1 H clk $end
$var wire 32 m" d [31:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 32 n" q [31:0] $end
$upscope $end
$scope module stall_f_dff $end
$var wire 1 H clk $end
$var wire 1 `" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 o" q $end
$upscope $end
$scope module d_stage $end
$var wire 32 p" alu_op_x [31:0] $end
$var wire 32 q" alu_op_y [31:0] $end
$var wire 32 r" alu_result_ex [31:0] $end
$var wire 1 /" atomic_ex $end
$var wire 1 0" atomic_id $end
$var wire 1 s" forward_rs_mem $end
$var wire 6 t" funct [5:0] $end
$var wire 32 u" imm [31:0] $end
$var wire 32 v" imm_sign_extend [31:0] $end
$var wire 32 w" imm_upper [31:0] $end
$var wire 32 x" imm_zero_extend [31:0] $end
$var wire 16 y" immediate [15:0] $end
$var wire 32 z" instr [31:0] $end
$var wire 1 {" isALUImm $end
$var wire 1 |" isBEQ $end
$var wire 1 }" isBGEZAL $end
$var wire 1 ~" isBGEZNL $end
$var wire 1 !# isBGTZ $end
$var wire 1 "# isBLEZ $end
$var wire 1 ## isBLTZAL $end
$var wire 1 $# isBLTZNL $end
$var wire 1 %# isBNE $end
$var wire 1 &# isBranchLink $end
$var wire 1 '# isEqual $end
$var wire 1 (# isJ $end
$var wire 1 )# isJAL $end
$var wire 1 *# isJALR $end
$var wire 1 +# isJR $end
$var wire 1 ,# isLUI $end
$var wire 1 -# isSLL $end
$var wire 1 .# isSLLV $end
$var wire 1 /# isSRA $end
$var wire 1 0# isSRAV $end
$var wire 1 1# isSRL $end
$var wire 1 2# isSRLV $end
$var wire 1 3# isShift $end
$var wire 1 4# isShiftImm $end
$var wire 32 5# jr_pc [31:0] $end
$var wire 1 +" jr_target $end
$var wire 1 ," jump_branch $end
$var wire 1 -" jump_target $end
$var wire 1 6# link $end
$var wire 1 2" mem_byte $end
$var wire 1 9" mem_read $end
$var wire 1 8" mem_read_ex $end
$var wire 1 <" mem_sc_id $end
$var wire 1 =" mem_sc_mask_id $end
$var wire 1 ?" mem_signextend $end
$var wire 1 B" mem_we $end
$var wire 32 7# mem_write_data [31:0] $end
$var wire 1 H" movn $end
$var wire 1 J" movz $end
$var wire 32 8# next_pc [31:0] $end
$var wire 6 9# op [5:0] $end
$var wire 32 :# pc [31:0] $end
$var wire 5 ;# rd_addr [4:0] $end
$var wire 1 <# read_from_rs $end
$var wire 1 =# read_from_rt $end
$var wire 1 P" reg_we $end
$var wire 1 O" reg_we_ex $end
$var wire 1 Q" reg_we_mem $end
$var wire 5 ># reg_write_addr [4:0] $end
$var wire 5 ?# reg_write_addr_ex [4:0] $end
$var wire 5 @# reg_write_addr_mem [4:0] $end
$var wire 32 A# reg_write_data_mem [31:0] $end
$var wire 5 B# rs_addr [4:0] $end
$var wire 32 C# rs_data [31:0] $end
$var wire 32 D# rs_data_in [31:0] $end
$var wire 1 E# rs_mem_dependency $end
$var wire 5 F# rt_addr [4:0] $end
$var wire 32 G# rt_data [31:0] $end
$var wire 32 H# rt_data_in [31:0] $end
$var wire 5 I# shamt [4:0] $end
$var wire 32 J# shift_amount [31:0] $end
$var wire 1 `" stall $end
$var wire 1 K# use_imm $end
$var reg 4 L# alu_opcode [3:0] $end
$upscope $end
$scope module atomic $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 0" d $end
$var wire 1 #" en $end
$var wire 1 \" r $end
$var reg 1 M# q $end
$upscope $end
$scope module sc $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 <" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 N# q $end
$upscope $end
$scope module alu_op_x_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 32 O# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 32 P# q [31:0] $end
$upscope $end
$scope module alu_op_y_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 32 Q# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 32 R# q [31:0] $end
$upscope $end
$scope module alu_opcode_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 4 S# d [3:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 4 T# q [3:0] $end
$upscope $end
$scope module movn $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 H" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 U# q $end
$upscope $end
$scope module movz $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 J" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 V# q $end
$upscope $end
$scope module x_stage $end
$var wire 1 W# add_check $end
$var wire 1 X# add_neg_over $end
$var wire 1 Y# add_pos_over $end
$var wire 1 Z# alu_neg $end
$var wire 32 [# alu_op_x [31:0] $end
$var wire 32 \# alu_op_x_signed [31:0] $end
$var wire 32 ]# alu_op_y [31:0] $end
$var wire 32 ^# alu_op_y_signed [31:0] $end
$var wire 1 z alu_op_y_zero $end
$var wire 4 _# alu_opcode [3:0] $end
$var wire 1 } alu_overflow $end
$var wire 1 `# sub_check $end
$var wire 1 a# sub_neg_over $end
$var wire 1 b# sub_pos_over $end
$var wire 1 c# x_neg $end
$var wire 1 d# y_neg $end
$var reg 32 e# alu_result [31:0] $end
$upscope $end
$scope module mem_write_data_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 32 f# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 32 g# q [31:0] $end
$upscope $end
$scope module mem_we_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 h# d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 i# q $end
$upscope $end
$scope module mem_read_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 j# d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 k# q $end
$upscope $end
$scope module mem_byte_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 2" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 l# q $end
$upscope $end
$scope module mem_signextend_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 ?" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 m# q $end
$upscope $end
$scope module alu_result_ex2mem $end
$var wire 1 H clk $end
$var wire 32 n# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 32 o# q [31:0] $end
$upscope $end
$scope module mem_read_ex2mem $end
$var wire 1 H clk $end
$var wire 1 p# d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 q# q $end
$upscope $end
$scope module mem_byte_ex2mem $end
$var wire 1 H clk $end
$var wire 1 1" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 r# q $end
$upscope $end
$scope module mem_signextend_ex2mem $end
$var wire 1 H clk $end
$var wire 1 >" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 s# q $end
$upscope $end
$scope module reg_write_addr_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 5 t# d [4:0] $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 5 u# q [4:0] $end
$upscope $end
$scope module reg_we_id2ex $end
$var wire 1 [" ar $end
$var wire 1 H clk $end
$var wire 1 P" d $end
$var wire 1 $" en $end
$var wire 1 \" r $end
$var reg 1 v# q $end
$upscope $end
$scope module reg_write_addr_ex2mem $end
$var wire 1 H clk $end
$var wire 5 w# d [4:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 5 x# q [4:0] $end
$upscope $end
$scope module reg_we_ex2mem $end
$var wire 1 H clk $end
$var wire 1 O" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 y# q $end
$upscope $end
$scope module reg_write_data_mem2wb $end
$var wire 1 H clk $end
$var wire 32 z# d [31:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 32 {# q [31:0] $end
$upscope $end
$scope module reg_write_addr_mem2wb $end
$var wire 1 H clk $end
$var wire 5 |# d [4:0] $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 5 }# q [4:0] $end
$upscope $end
$scope module reg_we_mem2wb $end
$var wire 1 H clk $end
$var wire 1 Q" d $end
$var wire 1 $" en $end
$var wire 1 [" r $end
$var reg 1 ~# q $end
$upscope $end
$scope module w_stage $end
$var wire 1 H clk $end
$var wire 1 $" en $end
$var wire 1 R" reg_we $end
$var wire 5 !$ reg_write_addr [4:0] $end
$var wire 32 "$ reg_write_data [31:0] $end
$var wire 5 #$ rs_addr [4:0] $end
$var wire 32 $$ rs_data [31:0] $end
$var wire 5 %$ rt_addr [4:0] $end
$var wire 32 &$ rt_data [31:0] $end
$upscope $end
$upscope $end
$scope module mips_local_store $end
$var wire 12 '$ addr [11:0] $end
$var wire 1 H clk $end
$var wire 32 ($ din [31:0] $end
$var wire 4 )$ we [3:0] $end
$var reg 32 *$ dout [31:0] $end
$scope begin column[0] $end
$upscope $end
$scope begin column[1] $end
$upscope $end
$scope begin column[2] $end
$upscope $end
$scope begin column[3] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx *$
b0 )$
b0 ($
b0 '$
bx &$
bx %$
bx $$
bx #$
b0 "$
b0 !$
0~#
b0 }#
b0 |#
b0 {#
b0 z#
0y#
b0 x#
b0 w#
0v#
b0 u#
bx t#
0s#
0r#
0q#
0p#
b0 o#
b0 n#
0m#
0l#
0k#
0j#
0i#
xh#
b0 g#
bx f#
b0 e#
0d#
0c#
0b#
0a#
0`#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
0Z#
0Y#
0X#
0W#
0V#
0U#
b0 T#
b1101 S#
b0 R#
bx Q#
b0 P#
bx O#
0N#
0M#
b1101 L#
xK#
b0xxxxx J#
bx I#
bx H#
bx G#
bx F#
0E#
bx D#
bx C#
bx B#
b0 A#
b0 @#
b0 ?#
bx >#
x=#
x<#
bx ;#
b0 :#
bx 9#
b1000 8#
bx 7#
x6#
bx 5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
bx z"
bx y"
b0xxxxxxxxxxxxxxxx x"
bx0000000000000000 w"
bx v"
bx u"
bx t"
0s"
b0 r"
bx q"
bx p"
0o"
b0 n"
bx m"
b0 l"
b0 k"
b0 j"
bx i"
bx h"
b100 g"
b0 f"
b0 e"
bx d"
bx c"
bx b"
0a"
0`"
b0 _"
bx ^"
bx ]"
0\"
0["
bx Z"
bx Y"
b0 X"
b0 W"
b0 V"
b0 U"
bx T"
b0 S"
0R"
0Q"
xP"
0O"
0N"
b0 M"
b0 L"
b0 K"
xJ"
0I"
xH"
0G"
b0 F"
bx E"
b0 D"
b0 C"
xB"
0A"
0@"
x?"
0>"
0="
x<"
0;"
0:"
09"
08"
bx 7"
b0xxxxxxxx 6"
bx 5"
bx 4"
03"
x2"
01"
00"
0/"
b0 ."
x-"
x,"
x+"
bx *"
b0 )"
b0 ("
bx '"
bx &"
1%"
1$"
0#"
b0 ""
b0 !"
b0 ~
0}
b1101 |
b0 {
1z
bx y
b0 x
bx w
b0 v
bx u
bx t
xs
xr
bx q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
bx i
bx h
0g
bx f
bx e
bx d
b0 c
b0 b
b0 a
0`
bx _
b0 ^
bx ]
b0 \
b0 [
bx Z
b0xxxxxxxxxxxxxxxxxxxx10 Y
0X
0W
1V
0U
0T
bx S
b0 R
b0 Q
b0 P
bx O
0N
b0 M
b0 L
bx K
0J
b0 I
0H
b0 G
b1 F
b0 E
b0xxxxxxxxxxxxxxxxxxxx10 D
b1110100011001010111001101110100011100110010111101100010011001110110010101111010001011110111010001100101011100110111010000101110011100100110010101110011011101010110110001110100 C
0B
b1 A
b1 @
b0 ?
b0 >
bx =
bx <
b0 ;
b100000000000000000 :
b1111101000 9
b11101000110010101110011011101000111001100101111011000100110011101100101011110100010111101100010011101010110100101101100011001000010111101100001011100000111000000101110011010000110010101111000 8
bx 7
bx 6
bx 5
bx 4
b1110100011001010111001101110100011100110010111101100010011001110110010101111010001011110111001101110100011100100110010101100001011011010111011101100001011101100110010100101110011101100110001101100100 3
b1 2
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
bx )
bx (
bx '
b0 &
b0 %
bx $
b0 #
b0 "
bx !
$end
#5000
03#
b0 J#
b100 h"
b100 i"
b0 w
b0 p"
b0 O#
b10000100000000000001000 c"
04#
b10000000000000100000000000000000 y
b10000000000000100000000000000000 q"
b10000000000000100000000000000000 Q#
b0 C#
b0 *"
b0 d"
b0 5#
0&#
b10000 T"
b10000 >#
b10000 t#
0+"
0,"
0-"
06#
1P"
0h#
b0 Z"
b0 D#
b0 $$
0~"
0}"
0!#
0"#
0$#
0##
0*#
0+#
0-#
01#
0.#
02#
0/#
00#
b1100 L#
b1100 |
b1100 S#
b10000000000000100000000000000000 u"
0|"
0%#
0(#
0)#
1K#
0<#
0=#
1,#
0{"
0B"
02"
1?"
0<"
b1111 9#
b0 Y"
b0 B#
b0 #$
b10000 ]"
b10000 F#
b10000 %$
b10000 ;#
b0 I#
0H"
0J"
b10 t"
b11111111111111111000000000000010 v"
b1000000000000010 x"
b10000000000000100000000000000000 w"
b1000000000000010 y"
b100001000000000000010 b"
b111100000100001000000000000010 '"
b111100000100001000000000000010 z"
b111100000100001000000000000010 K
b111100000100001000000000000010 $
b111100000100001000000000000010 Z
b111100000100001000000000000010 &"
b111100000100001000000000000010 m"
bx S
bx *$
b0 u
b0 )
b0 i
b0 t
b0 (
b0 h
0s
0r
b0 q
10
1H
#10000
00
0H
#15000
bx *$
bx S
10
1H
#20000
1["
00
0H
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
1B
1g
#25000
0V
bx ,
bx m
bx +
bx Q
bx -
bx n
0Y#
1b#
1Z#
b1 G
1O"
bx l
bx C"
bx ($
1d#
b10000000000000100000000000000000 e#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 r"
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 n#
b1000 h"
b1000 i"
b1 %
b1 [
bx S
bx *$
1v#
1N"
b10000 u#
b10000 S"
b10000 ?#
b10000 w#
1m#
1>"
bx g#
bx D"
b1100 T#
b1100 {
b1100 _#
b10000000000000100000000000000000 R#
b10000000000000100000000000000000 ^#
0z
b10000000000000100000000000000000 x
b10000000000000100000000000000000 ]#
b111100000100001000000000000010 n"
b111100000100001000000000000010 )"
b100 j"
b100 M"
b100 e"
b100 k"
b100 ^
b100 K"
10
1H
#30000
00
0H
b1111100111 1
b0xxxxxxxxxxxxxxxxxxxx01 D
b0xxxxxxxxxxxxxxxxxxxx01 Y
#35000
b1 y
b1 q"
b1 Q#
b10001 T"
b10001 >#
b10001 t#
b11 L#
b11 |
b11 S#
b1 u"
b10001000000000000000100 c"
1<#
0,#
1{"
b1101 9#
b10001 ]"
b10001 F#
b10001 %$
b0 ;#
b1 t"
b1 v"
b1 x"
b10000000000000000 w"
b1 y"
b100010000000000000001 b"
b10 G
b110100000100010000000000000001 '"
b110100000100010000000000000001 z"
b1100 h"
b1100 i"
b10 %
b10 [
b1100 8#
b1 ("
bx 6"
bx *$
bx S
b110100000100010000000000000001 K
b110100000100010000000000000001 $
b110100000100010000000000000001 Z
b110100000100010000000000000001 &"
b110100000100010000000000000001 m"
b1000 j"
b1000 M"
b1000 e"
b1000 k"
b1000 ^
b1000 K"
b100 l"
b1000 g"
b100 L"
b100 f"
b100 :#
b10000000000000100000000000000000 o#
b10000000000000100000000000000000 !"
b10000000000000100000000000000000 W"
b10000000000000100000000000000000 A#
b10000000000000100000000000000000 z#
1s#
1@"
b10000 x#
b10000 U"
b10000 @#
b10000 |#
1y#
1Q"
10
1H
#40000
00
0H
b1111100110 1
#45000
b1111111111111111 y
b1111111111111111 q"
b1111111111111111 Q#
b1000 T"
b1000 >#
b1000 t#
b1111111111111111 u"
b1000111111111111111100 c"
1V
b1000 ]"
b1000 F#
b1000 %$
b11111 ;#
b11111 I#
b111111 t"
b11111111111111111111111111111111 v"
b1111111111111111 x"
b11111111111111110000000000000000 w"
b1111111111111111 y"
b10001111111111111111 b"
0Z#
b11 G
b110100000010001111111111111111 '"
b110100000010001111111111111111 z"
0b#
0d#
b1 e#
b1 ~
b1 r"
0U
0W
b1 \
b1 ."
b1 ""
b1 n#
b10000 8#
b10 ("
b10000 h"
b10000 i"
b11 %
b11 [
b110100000010001111111111111111 K
b110100000010001111111111111111 $
b110100000010001111111111111111 Z
b110100000010001111111111111111 &"
b110100000010001111111111111111 m"
bx S
bx *$
1~#
1R"
b10000 }#
b10000 V"
b10000 !$
b10000000000000100000000000000000 {#
b10000000000000100000000000000000 X"
b10000000000000100000000000000000 "$
b10001 u#
b10001 S"
b10001 ?#
b10001 w#
b11 T#
b11 {
b11 _#
b1 R#
b1 ^#
b1 x
b1 ]#
b110100000100010000000000000001 n"
b110100000100010000000000000001 )"
b1000 l"
b1100 g"
b1000 L"
b1000 f"
b1000 :#
b1100 j"
b1100 M"
b1100 e"
b1100 k"
b1100 ^
b1100 K"
10
1H
#50000
00
0H
b1111100101 1
#55000
b0xxxxx J#
b101 y
b101 q"
b101 Q#
bx w
bx p"
bx O#
bx C#
bx *"
bx d"
bx 5#
b1 T"
b1 >#
b1 t#
b101 u"
bx Z"
bx D#
bx $$
1~"
0P"
b1011 L#
b1011 |
b1011 S#
b100000001000000000000010100 c"
b11111111111111 "
b11111111111111 L
1=#
0{"
b1 9#
b1000 Y"
b1000 B#
b1000 #$
b1 ]"
b1 F#
b1 %$
b0 ;#
b0 I#
b101 t"
b101 v"
b101 x"
b1010000000000000000 w"
b101 y"
b1000000010000000000000101 b"
b100 G
b111111111111 '$
b11111111111111 j
b11111111111111 *
b11111111111111 k
b11111111111111 b
b11111111111111 &
b11111111111111 c
b101000000010000000000000101 '"
b101000000010000000000000101 z"
b10100 h"
b10100 i"
b100 %
b100 [
b10100 8#
b11 ("
b1111111111111111 e#
b1111111111111111 ~
b1111111111111111 r"
b1111111111111111 \
b1111111111111111 ."
b1111111111111111 ""
b1111111111111111 n#
bx *$
bx S
b101000000010000000000000101 K
b101000000010000000000000101 $
b101000000010000000000000101 Z
b101000000010000000000000101 &"
b101000000010000000000000101 m"
b10000 j"
b10000 M"
b10000 e"
b10000 k"
b10000 ^
b10000 K"
b1100 l"
b10000 g"
b1100 L"
b1100 f"
b1100 :#
b110100000010001111111111111111 n"
b110100000010001111111111111111 )"
b1111111111111111 R#
b1111111111111111 ^#
b1111111111111111 x
b1111111111111111 ]#
b1 o#
b1 !"
b1 W"
b1 A#
b1 z#
b1000 u#
b1000 S"
b1000 ?#
b1000 w#
b10001 x#
b10001 U"
b10001 @#
b10001 |#
10
1H
#60000
00
0H
b1111100100 1
#65000
b0 y
b0 q"
b0 Q#
b10 T"
b10 >#
b10 t#
b0 u"
b0 Z"
b0 D#
b0 $$
0~"
1P"
b11 L#
b11 |
b11 S#
b10000000000000000000 c"
b0 J#
xV
xU
bx "
bx L
0=#
1{"
b1101 9#
b0 Y"
b0 B#
b0 #$
b10 ]"
b10 F#
b10 %$
b0 t"
b0 v"
b0 x"
b0 w"
b0 y"
b100000000000000000 b"
b0 w
b0 p"
b0 O#
xY#
xZ#
bx '$
b0xxxxxxxxxxxxxxx j
b0xxxxxxxxxxxxxxx *
b0xxxxxxxxxxxxxxx k
b0xxxxxxxxxxxxxxx b
b0xxxxxxxxxxxxxxx &
b0xxxxxxxxxxxxxxx c
b101 G
b110100000000100000000000000000 '"
b110100000000100000000000000000 z"
b0 C#
b0 *"
b0 d"
b0 5#
0O"
xa#
xc#
bx e#
bx ~
bx r"
xT
xX
xW
bx \
bx ."
bx ""
bx n#
b11000 8#
b100 ("
b11000 h"
b11000 i"
b101 %
b101 [
b110100000000100000000000000000 K
b110100000000100000000000000000 $
b110100000000100000000000000000 Z
b110100000000100000000000000000 &"
b110100000000100000000000000000 m"
bx S
bx *$
b10001 }#
b10001 V"
b10001 !$
b1 {#
b1 X"
b1 "$
b1000 x#
0s"
b1000 U"
b1000 @#
b1000 |#
0v#
0N"
b1 u#
b1 S"
b1 ?#
b1 w#
b1111111111111111 o#
b1111111111111111 !"
b1111111111111111 W"
b1111111111111111 A#
b1111111111111111 z#
b1011 T#
b1011 {
b1011 _#
b101 R#
b101 ^#
b101 x
b101 ]#
bx P#
bx \#
bx v
bx [#
b101000000010000000000000101 n"
b101000000010000000000000101 )"
b10000 l"
b10100 g"
b10000 L"
b10000 f"
b10000 :#
b10100 j"
b10100 M"
b10100 e"
b10100 k"
b10100 ^
b10100 K"
10
1H
#70000
00
0H
b1111100011 1
#75000
b100 y
b100 q"
b100 Q#
b10000000000000100000000000000000 w
b10000000000000100000000000000000 p"
b10000000000000100000000000000000 O#
b10000000000000100000000000000000 C#
b10000000000000100000000000000000 *"
b10000000000000100000000000000000 d"
b10000000000000100000000000000000 5#
b100 u"
0P"
1h#
b10000000000000100000000000000000 Z"
b10000000000000100000000000000000 D#
b10000000000000100000000000000000 $$
b1101 L#
b1101 |
b1101 S#
b1000000010000000000000010000 c"
1V
0U
b0 "
b0 L
1=#
0{"
1B"
b101011 9#
b10000 Y"
b10000 B#
b10000 #$
b100 t"
b100 v"
b100 x"
b1000000000000000000 w"
b100 y"
b10000000100000000000000100 b"
b110 G
0Y#
0Z#
b0 '$
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
b10101110000000100000000000000100 '"
b10101110000000100000000000000100 z"
b11100 h"
b11100 i"
b110 %
b110 [
b11100 8#
b101 ("
0a#
0c#
b0 e#
b0 ~
b0 r"
0T
0X
0W
b0 \
b0 ."
b0 ""
b0 n#
1O"
bx *$
bx S
b10101110000000100000000000000100 K
b10101110000000100000000000000100 $
b10101110000000100000000000000100 Z
b10101110000000100000000000000100 &"
b10101110000000100000000000000100 m"
b11000 j"
b11000 M"
b11000 e"
b11000 k"
b11000 ^
b11000 K"
b10100 l"
b11000 g"
b10100 L"
b10100 f"
b10100 :#
b110100000000100000000000000000 n"
b110100000000100000000000000000 )"
b0 P#
b0 \#
b0 v
b0 [#
b0 R#
b0 ^#
1z
b0 x
b0 ]#
b11 T#
b11 {
b11 _#
bx o#
bx !"
bx W"
bx A#
bx z#
b10 u#
b10 S"
b10 ?#
b10 w#
1v#
1N"
b1 x#
b1 U"
b1 @#
b1 |#
0y#
0Q"
b1111111111111111 {#
b1111111111111111 X"
b1111111111111111 "$
b1000 }#
b1000 V"
b1000 !$
10
1H
#80000
00
0H
b1111100010 1
#85000
b0 y
b0 q"
b0 Q#
b10001 T"
b10001 >#
b10001 t#
b1 E"
b1 7#
b1 f#
b1 G#
0'#
b1 ^"
b1 H#
b1 &$
b0 u"
b1000010001000000000000000000 c"
0V
b1 "
b1 L
b10001 ]"
b10001 F#
b10001 %$
b0 t"
b0 v"
b0 x"
b0 w"
b0 y"
b10000100010000000000000000 b"
b0 )$
0Y#
1Z#
b1 '$
b1 j
b1 *
b1 k
b1 b
b1 &
b1 c
b111 G
b10101110000100010000000000000000 '"
b10101110000100010000000000000000 z"
0O"
b1111 a
b1111 F"
0a#
1c#
b10000000000000100000000000000100 e#
b10000000000000100000000000000100 ~
b10000000000000100000000000000100 r"
1X
b10000000000000100000000000000100 \
b10000000000000100000000000000100 ."
b10000000000000100000000000000100 ""
b10000000000000100000000000000100 n#
b100000 8#
b110 ("
b100000 h"
b100000 i"
b111 %
b111 [
b10101110000100010000000000000000 K
b10101110000100010000000000000000 $
b10101110000100010000000000000000 Z
b10101110000100010000000000000000 &"
b10101110000100010000000000000000 m"
bx S
bx *$
0~#
0R"
b1 }#
b1 V"
b1 !$
bx {#
bx X"
bx "$
1y#
1Q"
b10 x#
b10 U"
b10 @#
b10 |#
0v#
0N"
b0 o#
b0 !"
b0 W"
b0 A#
b0 z#
1i#
1A"
b1101 T#
1W#
b1101 {
b1101 _#
b100 R#
b100 ^#
0z
b100 x
b100 ]#
b10000000000000100000000000000000 P#
b10000000000000100000000000000000 \#
b10000000000000100000000000000000 v
b10000000000000100000000000000000 [#
b10101110000000100000000000000100 n"
b10101110000000100000000000000100 )"
b11000 l"
b11100 g"
b11000 L"
b11000 f"
b11000 :#
b11100 j"
b11100 M"
b11100 e"
b11100 k"
b11100 ^
b11100 K"
10
1H
#90000
00
0H
b1111100001 1
#95000
b111 y
b111 q"
b111 Q#
b0 w
b0 p"
b0 O#
1'#
b0 C#
b0 *"
b0 d"
b0 5#
b0 T"
b0 >#
b0 t#
b111 u"
0<#
0=#
1-"
0h#
b0 Z"
b0 D#
b0 $$
b0 E"
b0 7#
b0 f#
b0 G#
b0 ^"
b0 H#
b0 &$
b1011 L#
b1011 |
b1011 S#
b11100 c"
b0 "
b0 L
1(#
0B"
b10 9#
b0 Y"
b0 B#
b0 #$
b0 ]"
b0 F#
b0 %$
b111 t"
b111 v"
b111 x"
b1110000000000000000 w"
b111 y"
b111 b"
b1000 G
b0 '$
b0 j
b0 *
b0 k
b0 b
b0 &
b0 c
b0 ,
b0 m
b1 +
b1 Q
b1 -
b1 n
b1000000000000000000000000111 '"
b1000000000000000000000000111 z"
b11100 h"
b11100 i"
b1000 %
b1000 [
b100100 8#
b111 ("
b10000000000000100000000000000000 e#
b10000000000000100000000000000000 ~
b10000000000000100000000000000000 r"
0X
1W
b10000000000000100000000000000000 \
b10000000000000100000000000000000 ."
b10000000000000100000000000000000 ""
b10000000000000100000000000000000 n#
b1 l
b1 C"
b1 ($
bx u
bx )
bx i
bx *$
bx S
b1000000000000000000000000111 K
b1000000000000000000000000111 $
b1000000000000000000000000111 Z
b1000000000000000000000000111 &"
b1000000000000000000000000111 m"
b100000 j"
b100000 M"
b100000 e"
b100000 k"
b100000 ^
b100000 K"
b11100 l"
b100000 g"
b11100 L"
b11100 f"
b11100 :#
b10101110000100010000000000000000 n"
b10101110000100010000000000000000 )"
b0 R#
b0 ^#
1z
b0 x
b0 ]#
b1 g#
b1 D"
b10000000000000100000000000000100 o#
b10000000000000100000000000000100 !"
b10000000000000100000000000000100 W"
b10000000000000100000000000000100 A#
b10000000000000100000000000000100 z#
b10001 u#
b10001 S"
b10001 ?#
b10001 w#
0y#
0Q"
b0 {#
b0 X"
b0 "$
b10 }#
b10 V"
b10 !$
1~#
1R"
10
1H
#100000
00
0H
b1111100000 1
#105000
13#
14#
b0 y
b0 q"
b0 Q#
b0 u"
b100000 h"
b100000 i"
0<#
1=#
0-"
1-#
b1010 L#
b1010 |
b1010 S#
b0 c"
1V
1P"
0(#
0K#
b0 9#
b0 t"
b0 v"
b0 x"
b0 w"
b0 y"
b0 b"
b0 +
b0 Q
b0 -
b0 n
0Z#
b0 .
b0 o
b0 R
b0 /
b0 p
b111 G
b0 '"
b0 z"
b0 a
b0 F"
b0 l
b0 C"
b0 ($
0c#
b0 e#
b0 ~
b0 r"
0U
0W
b0 \
b0 ."
b0 ""
b0 n#
b101000 8#
b1000 ("
b111 %
b111 [
b0 K
b0 $
b0 Z
b0 &"
b0 m"
bx S
bx *$
b1 t
b1 (
b1 h
0~#
0R"
b10000000000000100000000000000100 {#
b10000000000000100000000000000100 X"
b10000000000000100000000000000100 "$
b10001 x#
b10001 U"
b10001 @#
b10001 |#
b0 u#
b0 S"
b0 ?#
b0 w#
b10000000000000100000000000000000 o#
b10000000000000100000000000000000 !"
b10000000000000100000000000000000 W"
b10000000000000100000000000000000 A#
b10000000000000100000000000000000 z#
0i#
0A"
b0 g#
b0 D"
b1011 T#
0W#
b1011 {
b1011 _#
b111 R#
b111 ^#
0z
b111 x
b111 ]#
b0 P#
b0 \#
b0 v
b0 [#
b1000000000000000000000000111 n"
b1000000000000000000000000111 )"
b100000 l"
b100100 g"
b100000 L"
b100000 f"
b100000 :#
b11100 j"
b11100 M"
b11100 e"
b11100 k"
b11100 ^
b11100 K"
10
1H
#110000
00
0H
b10000000000000000000000000000011 4
b0xxxxxxxxxxxxxxxxxxxx00 D
b0xxxxxxxxxxxxxxxxxxxx00 Y
